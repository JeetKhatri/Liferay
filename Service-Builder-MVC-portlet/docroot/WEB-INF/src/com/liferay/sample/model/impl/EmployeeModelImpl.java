/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.liferay.sample.model.Employee;
import com.liferay.sample.model.EmployeeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;employee_data_mvc1&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sample.model.EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author admin
 * @see EmployeeImpl
 * @see com.liferay.sample.model.Employee
 * @see com.liferay.sample.model.EmployeeModel
 * @generated
 */
public class EmployeeModelImpl extends BaseModelImpl<Employee>
	implements EmployeeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link com.liferay.sample.model.Employee} interface instead.
	 */
	public static final String TABLE_NAME = "employee_data_mvc1";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eid", Types.INTEGER },
			{ "ename", Types.VARCHAR },
			{ "ecountry", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table employee_data_mvc1 (eid INTEGER not null primary key,ename VARCHAR(75) null,ecountry VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table employee_data_mvc1";
	public static final String ORDER_BY_JPQL = " ORDER BY employee.eid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY employee_data_mvc1.eid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sample.model.Employee"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sample.model.Employee"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.sample.model.Employee"),
			true);
	public static long ECOUNTRY_COLUMN_BITMASK = 1L;
	public static long EID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sample.model.Employee"));

	public EmployeeModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _eid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setEid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Employee.class;
	}

	@Override
	public String getModelClassName() {
		return Employee.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eid", getEid());
		attributes.put("ename", getEname());
		attributes.put("ecountry", getEcountry());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer eid = (Integer)attributes.get("eid");

		if (eid != null) {
			setEid(eid);
		}

		String ename = (String)attributes.get("ename");

		if (ename != null) {
			setEname(ename);
		}

		String ecountry = (String)attributes.get("ecountry");

		if (ecountry != null) {
			setEcountry(ecountry);
		}
	}

	@Override
	public int getEid() {
		return _eid;
	}

	@Override
	public void setEid(int eid) {
		_eid = eid;
	}

	@Override
	public String getEname() {
		if (_ename == null) {
			return StringPool.BLANK;
		}
		else {
			return _ename;
		}
	}

	@Override
	public void setEname(String ename) {
		_ename = ename;
	}

	@Override
	public String getEcountry() {
		if (_ecountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _ecountry;
		}
	}

	@Override
	public void setEcountry(String ecountry) {
		_columnBitmask |= ECOUNTRY_COLUMN_BITMASK;

		if (_originalEcountry == null) {
			_originalEcountry = _ecountry;
		}

		_ecountry = ecountry;
	}

	public String getOriginalEcountry() {
		return GetterUtil.getString(_originalEcountry);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Employee toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Employee)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeeImpl employeeImpl = new EmployeeImpl();

		employeeImpl.setEid(getEid());
		employeeImpl.setEname(getEname());
		employeeImpl.setEcountry(getEcountry());

		employeeImpl.resetOriginalValues();

		return employeeImpl;
	}

	@Override
	public int compareTo(Employee employee) {
		int primaryKey = employee.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Employee)) {
			return false;
		}

		Employee employee = (Employee)obj;

		int primaryKey = employee.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EmployeeModelImpl employeeModelImpl = this;

		employeeModelImpl._originalEcountry = employeeModelImpl._ecountry;

		employeeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Employee> toCacheModel() {
		EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

		employeeCacheModel.eid = getEid();

		employeeCacheModel.ename = getEname();

		String ename = employeeCacheModel.ename;

		if ((ename != null) && (ename.length() == 0)) {
			employeeCacheModel.ename = null;
		}

		employeeCacheModel.ecountry = getEcountry();

		String ecountry = employeeCacheModel.ecountry;

		if ((ecountry != null) && (ecountry.length() == 0)) {
			employeeCacheModel.ecountry = null;
		}

		return employeeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{eid=");
		sb.append(getEid());
		sb.append(", ename=");
		sb.append(getEname());
		sb.append(", ecountry=");
		sb.append(getEcountry());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sample.model.Employee");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eid</column-name><column-value><![CDATA[");
		sb.append(getEid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ename</column-name><column-value><![CDATA[");
		sb.append(getEname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ecountry</column-name><column-value><![CDATA[");
		sb.append(getEcountry());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Employee.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Employee.class
		};
	private int _eid;
	private String _ename;
	private String _ecountry;
	private String _originalEcountry;
	private long _columnBitmask;
	private Employee _escapedModel;
}