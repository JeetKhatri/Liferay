/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.liferay.sample.model.StudentAddress;
import com.liferay.sample.model.StudentAddressModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the StudentAddress service. Represents a row in the &quot;student_address&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sample.model.StudentAddressModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentAddressImpl}.
 * </p>
 *
 * @author admin
 * @see StudentAddressImpl
 * @see com.liferay.sample.model.StudentAddress
 * @see com.liferay.sample.model.StudentAddressModel
 * @generated
 */
public class StudentAddressModelImpl extends BaseModelImpl<StudentAddress>
	implements StudentAddressModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student address model instance should use the {@link com.liferay.sample.model.StudentAddress} interface instead.
	 */
	public static final String TABLE_NAME = "student_address";
	public static final Object[][] TABLE_COLUMNS = {
			{ "addressId", Types.INTEGER },
			{ "city", Types.VARCHAR },
			{ "country", Types.VARCHAR },
			{ "sid", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table student_address (addressId INTEGER not null primary key,city VARCHAR(75) null,country VARCHAR(75) null,sid INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table student_address";
	public static final String ORDER_BY_JPQL = " ORDER BY studentAddress.addressId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY student_address.addressId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sample.model.StudentAddress"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sample.model.StudentAddress"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sample.model.StudentAddress"));

	public StudentAddressModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _addressId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setAddressId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _addressId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return StudentAddress.class;
	}

	@Override
	public String getModelClassName() {
		return StudentAddress.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("addressId", getAddressId());
		attributes.put("city", getCity());
		attributes.put("country", getCountry());
		attributes.put("sid", getSid());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer addressId = (Integer)attributes.get("addressId");

		if (addressId != null) {
			setAddressId(addressId);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		Integer sid = (Integer)attributes.get("sid");

		if (sid != null) {
			setSid(sid);
		}
	}

	@Override
	public int getAddressId() {
		return _addressId;
	}

	@Override
	public void setAddressId(int addressId) {
		_addressId = addressId;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public int getSid() {
		return _sid;
	}

	@Override
	public void setSid(int sid) {
		_sid = sid;
	}

	@Override
	public StudentAddress toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (StudentAddress)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StudentAddressImpl studentAddressImpl = new StudentAddressImpl();

		studentAddressImpl.setAddressId(getAddressId());
		studentAddressImpl.setCity(getCity());
		studentAddressImpl.setCountry(getCountry());
		studentAddressImpl.setSid(getSid());

		studentAddressImpl.resetOriginalValues();

		return studentAddressImpl;
	}

	@Override
	public int compareTo(StudentAddress studentAddress) {
		int primaryKey = studentAddress.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof StudentAddress)) {
			return false;
		}

		StudentAddress studentAddress = (StudentAddress)obj;

		int primaryKey = studentAddress.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<StudentAddress> toCacheModel() {
		StudentAddressCacheModel studentAddressCacheModel = new StudentAddressCacheModel();

		studentAddressCacheModel.addressId = getAddressId();

		studentAddressCacheModel.city = getCity();

		String city = studentAddressCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			studentAddressCacheModel.city = null;
		}

		studentAddressCacheModel.country = getCountry();

		String country = studentAddressCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			studentAddressCacheModel.country = null;
		}

		studentAddressCacheModel.sid = getSid();

		return studentAddressCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{addressId=");
		sb.append(getAddressId());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", sid=");
		sb.append(getSid());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sample.model.StudentAddress");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>addressId</column-name><column-value><![CDATA[");
		sb.append(getAddressId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sid</column-name><column-value><![CDATA[");
		sb.append(getSid());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StudentAddress.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			StudentAddress.class
		};
	private int _addressId;
	private String _city;
	private String _country;
	private int _sid;
	private StudentAddress _escapedModel;
}