/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.liferay.sample.model.Student;
import com.liferay.sample.model.StudentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Student service. Represents a row in the &quot;student&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sample.model.StudentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StudentImpl}.
 * </p>
 *
 * @author admin
 * @see StudentImpl
 * @see com.liferay.sample.model.Student
 * @see com.liferay.sample.model.StudentModel
 * @generated
 */
public class StudentModelImpl extends BaseModelImpl<Student>
	implements StudentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a student model instance should use the {@link com.liferay.sample.model.Student} interface instead.
	 */
	public static final String TABLE_NAME = "student";
	public static final Object[][] TABLE_COLUMNS = {
			{ "sid", Types.INTEGER },
			{ "sname", Types.VARCHAR },
			{ "sgender", Types.INTEGER },
			{ "snumber", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table student (sid INTEGER not null primary key,sname VARCHAR(75) null,sgender INTEGER,snumber VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table student";
	public static final String ORDER_BY_JPQL = " ORDER BY student.sid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY student.sid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sample.model.Student"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sample.model.Student"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sample.model.Student"));

	public StudentModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _sid;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setSid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Student.class;
	}

	@Override
	public String getModelClassName() {
		return Student.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("sid", getSid());
		attributes.put("sname", getSname());
		attributes.put("sgender", getSgender());
		attributes.put("snumber", getSnumber());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer sid = (Integer)attributes.get("sid");

		if (sid != null) {
			setSid(sid);
		}

		String sname = (String)attributes.get("sname");

		if (sname != null) {
			setSname(sname);
		}

		Integer sgender = (Integer)attributes.get("sgender");

		if (sgender != null) {
			setSgender(sgender);
		}

		String snumber = (String)attributes.get("snumber");

		if (snumber != null) {
			setSnumber(snumber);
		}
	}

	@Override
	public int getSid() {
		return _sid;
	}

	@Override
	public void setSid(int sid) {
		_sid = sid;
	}

	@Override
	public String getSname() {
		if (_sname == null) {
			return StringPool.BLANK;
		}
		else {
			return _sname;
		}
	}

	@Override
	public void setSname(String sname) {
		_sname = sname;
	}

	@Override
	public int getSgender() {
		return _sgender;
	}

	@Override
	public void setSgender(int sgender) {
		_sgender = sgender;
	}

	@Override
	public String getSnumber() {
		if (_snumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _snumber;
		}
	}

	@Override
	public void setSnumber(String snumber) {
		_snumber = snumber;
	}

	@Override
	public Student toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Student)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		StudentImpl studentImpl = new StudentImpl();

		studentImpl.setSid(getSid());
		studentImpl.setSname(getSname());
		studentImpl.setSgender(getSgender());
		studentImpl.setSnumber(getSnumber());

		studentImpl.resetOriginalValues();

		return studentImpl;
	}

	@Override
	public int compareTo(Student student) {
		int primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Student)) {
			return false;
		}

		Student student = (Student)obj;

		int primaryKey = student.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Student> toCacheModel() {
		StudentCacheModel studentCacheModel = new StudentCacheModel();

		studentCacheModel.sid = getSid();

		studentCacheModel.sname = getSname();

		String sname = studentCacheModel.sname;

		if ((sname != null) && (sname.length() == 0)) {
			studentCacheModel.sname = null;
		}

		studentCacheModel.sgender = getSgender();

		studentCacheModel.snumber = getSnumber();

		String snumber = studentCacheModel.snumber;

		if ((snumber != null) && (snumber.length() == 0)) {
			studentCacheModel.snumber = null;
		}

		return studentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{sid=");
		sb.append(getSid());
		sb.append(", sname=");
		sb.append(getSname());
		sb.append(", sgender=");
		sb.append(getSgender());
		sb.append(", snumber=");
		sb.append(getSnumber());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sample.model.Student");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>sid</column-name><column-value><![CDATA[");
		sb.append(getSid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sname</column-name><column-value><![CDATA[");
		sb.append(getSname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sgender</column-name><column-value><![CDATA[");
		sb.append(getSgender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>snumber</column-name><column-value><![CDATA[");
		sb.append(getSnumber());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Student.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Student.class
		};
	private int _sid;
	private String _sname;
	private int _sgender;
	private String _snumber;
	private Student _escapedModel;
}